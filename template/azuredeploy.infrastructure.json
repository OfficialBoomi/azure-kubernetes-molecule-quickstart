{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "virtualNetworkAddressPrefixes": {
        "defaultValue": "10.0.0.0/19",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefixes of the virtual network."
        }
      },
      "aksSubnetAddressPrefix": {
        "defaultValue": "10.0.0.0/20",
        "type": "string",
        "metadata": {
          "description": "Specifies the address prefix of the subnet hosting the system node pool of the AKS cluster."
        }
      },
      "applicationGatewaySubnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.16.0/25",
        "metadata": {
          "description": "Specifies the address prefix of the subnet which contains the Application Gateway."
        }
      },
      "virtualMachineSubnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.16.128/25",
        "metadata": {
          "description": "Specifies the address prefix of the subnet which contains the virtual machine."
        }
      },
      "netAppFileSubnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.17.0/25",
        "metadata": {
          "description": "Specifies the NetApp File subnet IP prefix. This prefix must be within vnet IP prefix address space."
        }
      },
      "remoteAccessCIDR": {
        "type": "string",
        "defaultValue": "0.0.0.0/0",
        "metadata": {
          "description": "The CIDR IP range that is permitted to access the bastion instances. We recommend that you set this value to a trusted IP range."
        }
      },
      "aksClusterKubernetesVersion": {
        "type": "string",
        "defaultValue": "1.21.2",
        "metadata": {
          "description": "Specifies the version of Kubernetes specified when creating the managed cluster."
        }
      },
      "aksClusterEnablePrivateCluster": {
        "defaultValue": false,
        "type": "bool",
        "metadata": {
          "description": "Specifies whether to create the cluster as a private cluster or not."
        }
      },
      "aksClusterSkuTier": {
        "type": "string",
        "defaultValue": "Paid",
        "allowedValues": [
          "Paid",
          "Free"
        ],
        "metadata": {
          "description": "Specifies the tier of a managed cluster SKU: Paid or Free"
        }
      },
      "systemNodePoolVirtualMachineSize": {
        "defaultValue": "Standard_D4s_v3",
        "type": "string",
        "metadata": {
          "description": "Specifies the vm size of nodes in the system node pool."
        }
      },
      "userNodePoolVirtualMachineSize": {
        "defaultValue": "Standard_D4s_v3",
        "type": "string",
        "metadata": {
          "description": "Specifies the vm size of nodes in the user node pool."
        }
      },
      "aksClusterTags": {
        "defaultValue": {
          "resourceType": "AKS Cluster",
          "createdBy": "ARM Template"
        },
        "type": "object",
        "metadata": {
          "description": "Specifies the tags of the AKS cluster."
        }
      },
       "aksClusterPodCidr": {
        "defaultValue": "10.0.20.0/22",
        "type": "string",
        "metadata": {
          "description": "Specifies the CIDR notation IP range from which to assign pod IPs when kubenet is used."
        }
      },
      "aksClusterServiceCidr": {
        "defaultValue": "10.0.24.0/24",
        "type": "string",
        "metadata": {
          "description": "A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges."
        }
      },
      "aksClusterDnsServiceIP": {
        "defaultValue": "10.0.24.10",
        "type": "string",
        "metadata": {
          "description": "Specifies the IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr."
        }
      },
      "aksClusterDockerBridgeCidr": {
        "defaultValue": "172.17.0.1/16",
        "type": "string",
        "metadata": {
          "description": "Specifies the CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range."
        }
      },
      "aadEnabled": {
        "defaultValue": false,
        "type": "bool",
        "metadata": {
          "description": "Specifies whether enabling AAD integration."
        }
      },
      "aadProfileAdminGroupObjectIDs": {
        "defaultValue": [],
        "type": "array",
        "metadata": {
          "description": "Specifies the AAD group object IDs that will have admin role of the cluster."
        }
      },
      "aadProfileManaged": {
        "defaultValue": false,
        "type": "bool",
        "metadata": {
          "description": "Specifies whether to enable managed AAD integration."
        }
      },
      "aadProfileEnableAzureRBAC": {
        "defaultValue": false,
        "type": "bool",
        "metadata": {
          "description": "Specifies whether to  to enable Azure RBAC for Kubernetes authorization."
        }
      },
      "systemNodePoolAgentCount": {
        "defaultValue": 1,
        "type": "int",
        "metadata": {
          "description": "Specifies the number of agents (VMs) to host docker containers in the system node pool. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1."
        }
      },
      "systemNodePoolMinCount": {
        "defaultValue": 1,
        "type": "int",
        "metadata": {
          "description": "Specifies the minimum number of nodes for auto-scaling for the system node pool."
        }
      },
      "systemNodePoolMaxCount": {
        "defaultValue":10,
        "type": "int",
        "metadata": {
          "description": "Specifies the maximum number of nodes for auto-scaling for the system node pool."
        }
      },
      "systemNodePoolNodeLabels": {
        "defaultValue": {},
        "type": "object",
        "metadata": {
          "description": "Specifies the Agent pool node labels to be persisted across all nodes in the system node pool."
        }
      },
      "systemNodePoolNodeTaints": {
        "defaultValue": [],
        "type": "array",
        "metadata": {
          "description": "Specifies the taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. - string"
        }
      },
      "aksNodePoolAvailabilityZones": {
        "defaultValue": [],
        "type": "array",
        "metadata": {
          "description": "Specifies the availability zones for the agent nodes in the system node pool. Requirese the use of VirtualMachineScaleSets as node pool type."
        }
      },
      "userNodePoolAgentCount": {
        "defaultValue": 3,
        "type": "int",
        "metadata": {
          "description": "Specifies the number of agents (VMs) to host docker containers in the user node pool. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1."
        }
      },
      "userNodePoolMinCount": {
        "defaultValue": 3,
        "type": "int",
        "metadata": {
          "description": "Specifies the minimum number of nodes for auto-scaling for the user node pool."
        }
      },
      "userNodePoolMaxCount": {
        "defaultValue": 10,
        "type": "int",
        "metadata": {
          "description": "Specifies the maximum number of nodes for auto-scaling for the user node pool."
        }
      },
      "userNodePoolNodeLabels": {
        "defaultValue": {},
        "type": "object",
        "metadata": {
          "description": "Specifies the Agent pool node labels to be persisted across all nodes in the user node pool."
        }
      },
      "userNodePoolNodeTaints": {
        "defaultValue": [],
        "type": "array",
        "metadata": {
          "description": "Specifies the taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. - string"
        }
      },
        "PodCPUSize": {  
        "type": "string",
        "allowedValues": [
          "1000m",
          "2000m"
        ],
        "defaultValue": "1000m",
        "metadata": {
          "description": "Specifies Pod limit CPU Size"
        }
      },
      "PodMemorySize": {
        "type": "string",
        "allowedValues": [
          "512Mi",
          "1024Mi",
          "2064Mi"
        ],
        "defaultValue": "1024Mi",
        "metadata": {
          "description": "Specifies Pod limit Memory Size"
        }
      },
      "PersistentVolumeSize": { 
        "type": "string",
        "allowedValues": [
          "250Gi",
          "500Gi"
        ],
        "defaultValue": "250Gi",
        "metadata": {
          "description": "Specifies persistent volume size"
        }
      },
      "applicationGatewayZones": {
        "type": "array",
        "defaultValue": [],
        "metadata": {
          "description": "Specifies the availability zones of the Application Gateway."
        }
      },
      "netAppServiceLevel": {
        "defaultValue": "Premium",
        "type": "string",
        "allowedValues": [
          "Premium",
          "Ultra",
          "Standard"
        ],
        "metadata": {
          "description": "Target performance for the capacity pool. Service level: Ultra, Premium, or Standard."
        }
      },
      "virtualMachineSize": {
        "type": "string",
        "defaultValue": "Standard_DS1_v2",
        "metadata": {
          "description": "Specifies the size of the virtual machine."
        }
      },
      "virtualMachineAdminUsername": {
        "type": "string",
        "defaultValue": "boomi",
        "metadata": {
          "description": "Specifies the name of the administrator account of the virtual machine."
        }
      },
      "virtualMachineAdminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Specifies the password for the virtual machine."
        }
      },
      "BoomiAuthenticationType": {
        "defaultValue": "token",
        "allowedValues": [
          "token",
          "password"
        ],
        "type": "string",
        "metadata": {
          "description": "Boomi Platform Authentication Type"
        }
      },
      "BoomiAccountID": {
        "type": "string",
        "metadata": {
          "description": "The Boomi account ID that you want to associate with the new Molecule cluster."
        }
      },
      "BoomiUsername": {
        "type": "string",
        "metadata": {
          "description": "The email account associated with the Boomi account."
        }
      },
      "BoomiMFAInstallToken": {
        "defaultValue": "",
        "type": "securestring",
        "metadata": {
          "description": "An MFA API token generated by your Dell Boomi Administrator."
        }
      },
      "BoomiPassword": {
        "defaultValue": "",
        "type": "securestring",
        "metadata": {
          "description": "The password associated with the Boomi account."
        }
      },
      "BoomiMoleculeName": {
      "defaultValue": "Boomi-AKS",
        "type": "string",
        "metadata": {
          "description": "The Boomi Molecule cluster name"
        }
    },
      "sslCertificateSecretData": {
        "type": "securestring",
        "defaultValue": "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"
      }
    },
    "variables": {
      "readerRoleDefinitionName": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
      "contributorRoleDefinitionName": "b24988ac-6180-42a0-ab88-20f7382dd24c",
  
      "readerRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionName'))]",
      "contributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleDefinitionName'))]",
  
      "removeChar1": "[replace(resourceGroup().name, '_', '')]",
      "removeChar2": "[replace(variables('removeChar1'), '.', '')]",
      "removeChar3": "[replace(variables('removeChar2'), '(', '')]",
      "cleanResourceGroupName": "[replace(tolower(variables('removeChar3')), ')', '')]",
  
      "deploymentName": "[concat(variables('cleanResourceGroupName'), '-', uniqueString(resourceGroup().id))]",
  
      "aksClusterUserDefinedManagedIdentityName": "[concat(variables('deploymentName'), '-askManagedIdentity')]",
      "aksClusterUserDefinedManagedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('aksClusterUserDefinedManagedIdentityName'))]",
  
      "applicationGatewayUserDefinedManagedIdentityName": "[concat(variables('deploymentName'), '-applicationGatewayNameManagedIdentity')]",
      "applicationGatewayUserDefinedManagedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('applicationGatewayUserDefinedManagedIdentityName'))]",
  
      "aadPodIdentityUserDefinedManagedIdentityName": "[concat(variables('deploymentName'), '-aadPodManagedIdentity')]",
      "aadPodIdentityUserDefinedManagedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('aadPodIdentityUserDefinedManagedIdentityName'))]",
  
      "virtualMachineUserDefinedManagedIdentityName": "[concat(variables('deploymentName'), '-virtualMachineManagedIdentity')]",
      "virtualMachineUserDefinedManagedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('virtualMachineUserDefinedManagedIdentityName'))]",
  
      "aksContributorRoleAssignmentName": "[guid(concat(variables('deploymentName'), '-aksContributorRoleAssignment'))]",
      "aksContributorRoleAssignmentId": "[resourceId('Microsoft.Authorization/roleAssignments', variables('aksContributorRoleAssignmentName'))]",
  
      "virtualMachineContributorRoleAssignmentName": "[guid(concat(variables('deploymentName'), '-virtualMachineContributorRoleAssignment'))]",
      "virtualMachineContributorRoleAssignmentId": "[resourceId('Microsoft.Authorization/roleAssignments', variables('virtualMachineContributorRoleAssignmentName'))]",
  
      "applicationGatewayContributorRoleAssignmentName": "[guid(concat(variables('deploymentName'), '-applicationGatewayContributorRoleAssignment'))]",
  
  
      "natGatewayPublicIpAddressName": "[concat(variables('deploymentName'), '-natGatewayPublicIp')]",
      "natGatewayPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('natGatewayPublicIpAddressName'))]",
  
      "natGatewayPublicIpPrefixName": "[concat(variables('deploymentName'), '-natGatewayPublicIpPrefix')]",
      "natGatewayPublicIpPrefixId": "[resourceId('Microsoft.Network/publicIPPrefixes', variables('natGatewayPublicIpPrefixName'))]",
  
      "natGatewayname": "[concat(variables('deploymentName'), '-natGateway')]",
      "natGatewayId": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayname'))]",
  
      "virtualNetworkName": "[concat(variables('deploymentName'), '-virtualnetwork')]",
      "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
  
      "aksSubnetName": "[concat(variables('deploymentName'), '-askSubnet')]",
      "aksSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('aksSubnetName'))]",
  
      "virtualMachineSubnetName": "[concat(variables('deploymentName'), '-virtualMachineSubnet')]",
      "virtualMachineSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('virtualMachineSubnetName'))]",
  
      "applicationGatewaySubnetName": "[concat(variables('deploymentName'), '-applicationGatewaySubnet')]",
      "applicationGatewaySubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('applicationGatewaySubnetName'))]",
  
      "netAppFileSubnetName": "[concat(variables('deploymentName'), '-netAppFileSubnet')]",
      "netAppFileSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('netAppFileSubnetName'))]",
  
      "virtualMachineSubnetNsgName": "[concat(variables('deploymentName'), '-Nsg')]",
      "virtualMachineSubnetNsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('virtualMachineSubnetNsgName'))]",
  
      "virtualMachineNicName": "[concat(variables('deploymentName'), '-virtualMachineNic')]",
      "virtualMachineNicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('virtualMachineNicName'))]",
  
      "virtualMachinePublicIpAddressName": "[concat(variables('deploymentName'), '-virtualMachinePublicIp')]",
      "virtualMachinePublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('virtualMachinePublicIpAddressName'))]",
  
      "netAppFileDelegationsName": "[concat(variables('deploymentName'), '-netAppDelegation')]",
  
      "netAppAccountName": "[concat(variables('deploymentName'), '-netAppAccount')]",
      "netAppAccountId": "[resourceId('Microsoft.NetApp/netAppAccounts/', variables('netAppAccountName'))]",
  
      "netAppPoolName": "[concat(tolower(variables('netAppAccountName')), 'pool')]",
      "capacityPoolId": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', variables('netAppAccountName'), variables('netAppPoolName'))]",
  
      "capacityPoolName": "[concat(variables('netAppAccountName'), '/',variables('netAppPoolName'))]",
      "volumeName": "[concat(variables('netAppAccountName'), '/',variables('netAppPoolName'),'/', variables('netAppVolumeName'))]",
  
      "netAppVolumeName": "[concat(tolower(variables('netAppAccountName')), 'volume')]",
      "netAppVolumeId": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))]",
  
      "keyVaultName": "[take(concat(variables('cleanResourceGroupName'), '-keyVault'), 24)]",
      "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
  
      "applicationGatewayPublicIPAddressName": "[concat(variables('deploymentName'), '-applicationGatewayPublicIp')]",
      "applicationGatewayPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayPublicIPAddressName'))]",
  
      "applicationGatewayName": "[concat(variables('deploymentName'), '-applicationGateway')]",
      "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName'))]",
  
      "applicationGatewaySSLCert": "[concat(variables('deploymentName'), '-appGatewaySslCert')]",
  
      "applicationGatewayIPConfigurationName": "applicationGatewayIPConfiguration",
      "applicationGatewayFrontendIPConfigurationName": "applicationGatewayFrontendIPConfiguration",
      "applicationGatewayFrontendIPConfigurationId": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGatewayName'), variables('applicationGatewayFrontendIPConfigurationName'))]",
      "applicationGatewayHttpFrontendPortName": "applicationGatewayHttpFrontendPort",
      "applicationGatewayHttpFrontendPortId": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), variables('applicationGatewayHttpFrontendPortName'))]",
      "applicationGatewayHttpsFrontendPortName": "applicationGatewayHttpsFrontendPort",
      "applicationGatewayHttpsFrontendPortId": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), variables('applicationGatewayHttpsFrontendPortName'))]",
      "applicationGatewayHttpListenerName": "applicationGatewayHttpListener",
      "applicationGatewayHttpListenerId": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), variables('applicationGatewayHttpListenerName'))]",
      "applicationGatewayHttpsListenerName": "applicationGatewayHttpsListener",
      "applicationGatewayHttpsListenerId": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), variables('applicationGatewayHttpsListenerName'))]",
      "applicationGatewayBackendAddressPoolName": "applicationGatewayBackendPool",
      "applicationGatewayBackendAddressPoolId": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), variables('applicationGatewayBackendAddressPoolName'))]",
      "applicationGatewayBackendHttpSettingsName": "applicationGatewayBackendHttpSettings",
      "applicationGatewayBackendHttpSettingsId": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGatewayName'), variables('applicationGatewayBackendHttpSettingsName'))]",
      "applicationGatewayHttpRequestRoutingRuleName": "httpRule",
      "applicationGatewayHttpsRequestRoutingRuleName": "httpsRule",
  
      "aksClusterName": "[concat(variables('deploymentName'), '-askCluster')]",
      "aksClusterId": "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]",
  
      "aksClusterDnsPrefix": "[concat(variables('deploymentName'), '-ask')]",
  
      "virtualMachineName": "[concat(variables('deploymentName'), '-virtualMachine')]",
      "virtualMachineId": "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]",
  
      "aadProfileConfiguration": {
        "managed": "[parameters('aadProfileManaged')]",
        "enableAzureRBAC": "[parameters('aadProfileEnableAzureRBAC')]",
        "adminGroupObjectIDs": "[parameters('aadProfileAdminGroupObjectIDs')]",
        "tenantID": "[subscription().tenantId]"
      }
    },
    "resources": [
      {
        "comments": "User-Defined Managed Identity defined for the AKS cluster. Used to access the Virtual Network and other resources.",
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "name": "[variables('aksClusterUserDefinedManagedIdentityName')]",
        "apiVersion": "2018-11-30",
        "location": "[resourceGroup().location]"
      },
      {
        "comments": "User-Defined Managed Identity used by the Application Gateway is assigned. Used to access Azure Key Vault.",
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "apiVersion": "2018-11-30",
        "name": "[variables('applicationGatewayUserDefinedManagedIdentityName')]",
        "location": "[resourceGroup().location]"
      },
      {
        "comments": "User-Defined Managed Identity used by an AAD Pod Identity. Used to access Azure Key Vault.",
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "apiVersion": "2018-11-30",
        "name": "[variables('aadPodIdentityUserDefinedManagedIdentityName')]",
        "location": "[resourceGroup().location]"
      },
      {
        "comments": "User-Defined Managed Identity defined for the Azure Virtual Machine. Used to access the Virtual Network and other resources.",
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "name": "[variables('virtualMachineUserDefinedManagedIdentityName')]",
        "apiVersion": "2018-11-30",
        "location": "[resourceGroup().location]"
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[variables('aksContributorRoleAssignmentName')]",
        "dependsOn": [
          "[variables('aksClusterUserDefinedManagedIdentityId')]",
          "[variables('virtualNetworkId')]"
        ],
        "properties": {
          "roleDefinitionId": "[variables('contributorRoleId')]",
          "description": "Assign the cluster user-defined managed identity contributor role on the resource group.",
          "principalId": "[reference(variables('aksClusterUserDefinedManagedIdentityName')).principalId]",
          "principalType": "ServicePrincipal",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[variables('applicationGatewayContributorRoleAssignmentName')]",
        "dependsOn": [
          "[variables('aksClusterId')]",
          "[variables('applicationGatewayId')]"
        ],
        "properties": {
          "roleDefinitionId": "[variables('contributorRoleId')]",
          "principalId": "[reference(variables('aksClusterId'), '2021-05-01', 'Full').properties.addonProfiles.ingressApplicationGateway.identity.objectId]",
          "principalType": "ServicePrincipal",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[variables('virtualMachineContributorRoleAssignmentName')]",
        "dependsOn": [
          "[variables('virtualMachineUserDefinedManagedIdentityId')]"
        ],
        "properties": {
          "roleDefinitionId": "[variables('contributorRoleId')]",
          "principalId": "[reference(variables('virtualMachineUserDefinedManagedIdentityName')).principalId]",
          "principalType": "ServicePrincipal",
          "scope": "[resourceGroup().id]"
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-07-01",
        "name": "[variables('applicationGatewayPublicIPAddressName')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 30
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('virtualMachinePublicIpAddressName')]",
        "apiVersion": "2020-07-01",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 30
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-07-01",
        "name": "[variables('natGatewayPublicIpAddressName')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAddressVersion": "IPv4",
          "publicIPAllocationMethod": "Static",
          "idleTimeoutInMinutes": 30
        }
      },
      {
        "type": "Microsoft.Network/publicIPPrefixes",
        "apiVersion": "2020-07-01",
        "name": "[variables('natGatewayPublicIpPrefixName')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "prefixLength": 31,
          "publicIPAddressVersion": "IPv4"
        }
      },
      {
        "type": "Microsoft.Network/natGateways",
        "apiVersion": "2020-07-01",
        "name": "[variables('natGatewayname')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "dependsOn": [
          "[variables('natGatewayPublicIpAddressId')]",
          "[variables('natGatewayPublicIpPrefixId')]"
        ],
        "properties": {
          "idleTimeoutInMinutes": 4,
          "publicIpAddresses": [
            {
              "id": "[variables('natGatewayPublicIpAddressId')]"
            }
          ],
          "publicIpPrefixes": [
            {
              "id": "[variables('natGatewayPublicIpPrefixId')]"
            }
          ]
        }
      },
      {
        "apiVersion": "2020-07-01",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('virtualMachineSubnetNsgName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "securityRules": [
            {
              "name": "allow-ssh-inbound",
              "properties": {
                "priority": 100,
                "access": "Allow",
                "direction": "Inbound",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "protocol": "Tcp",
                "sourceAddressPrefix": "[parameters('remoteAccessCIDR')]",
                "destinationAddressPrefix": "[parameters('virtualMachineSubnetAddressPrefix')]"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2020-07-01",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('virtualMachineSubnetNsgId')]",
          "[variables('natGatewayId')]"
        ],
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[parameters('virtualNetworkAddressPrefixes')]"
            ]
          },
          "dhcpOptions": {
            "dnsServers": []
          },
          "subnets": [
            {
              "name": "[variables('aksSubnetName')]",
              "properties": {
                "addressPrefix": "[parameters('aksSubnetAddressPrefix')]",
                "natGateway": {
                  "id": "[variables('natGatewayId')]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            },
            {
              "name": "[variables('virtualMachineSubnetName')]",
              "properties": {
                "addressPrefix": "[parameters('virtualMachineSubnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[variables('virtualMachineSubnetNsgId')]"
                },
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.KeyVault",
                    "locations": [
                      "*"
                    ]
                  }
                ]
              }
            },
            {
              "name": "[variables('applicationGatewaySubnetName')]",
              "properties": {
                "addressPrefix": "[parameters('applicationGatewaySubnetAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "serviceEndpoints": [
                  {
                    "service": "Microsoft.KeyVault",
                    "locations": [
                      "*"
                    ]
                  }
                ]
              }
            },
            {
              "name": "[variables('netAppFileSubnetName')]",
              "properties": {
                "addressPrefix": "[parameters('netAppFileSubnetAddressPrefix')]",
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled",
                "delegations": [
                  {
                    "name": "[variables('netAppFileDelegationsName')]",
                    "properties": {
                      "serviceName": "Microsoft.NetApp/volumes"
                    }
                  }
                ]
              }
            }
          ],
          "virtualNetworkPeerings": [],
          "enableDdosProtection": false,
          "enableVmProtection": false
        }
      },
      {
        "name": "[variables('netAppAccountName')]",
        "type": "Microsoft.NetApp/netAppAccounts",
        "apiVersion": "2020-11-01",
        "location": "[resourceGroup().location]",
        "properties": {}
      },
      {
        "name": "[variables('capacityPoolName')]",
        "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
        "apiVersion": "2020-11-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('netAppAccountId')]"
        ],
        "properties": {
          "serviceLevel": "[parameters('netAppServiceLevel')]",
          "size": 4398046511104,
          "qosType":"Manual"
        }
      },
      {
        "name": "[variables('volumeName')]",
        "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
        "apiVersion": "2020-11-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('capacityPoolId')]",
          "[variables('virtualNetworkId')]"
        ],
        "properties": {
          "serviceLevel": "[parameters('netAppServiceLevel')]",
          "creationToken": "[variables('netAppVolumeName')]",
          "usageThreshold": 4398046511104,
          "throughputMibps":60,
          "exportPolicy": {
            "rules": [
              {
                "ruleIndex": 1,
                "unixReadOnly": false,
                "unixReadWrite": true,
                "cifs": false,
                "nfsv3": true,
                "nfsv41": false,
                "chownMode": "Unrestricted",
                "allowedClients": "[parameters('virtualNetworkAddressPrefixes')]"
              }
            ]
          },
          "protocolTypes": [
            "NFSv3"
          ],
          "subnetId": "[variables('netAppFileSubnetId')]",
          "snapshotDirectoryVisible": false
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2019-09-01",
        "name": "[variables('keyVaultName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('applicationGatewayUserDefinedManagedIdentityId')]",
          "[variables('aadPodIdentityUserDefinedManagedIdentityId')]",
          "[variables('virtualMachineUserDefinedManagedIdentityId')]",
          "[variables('virtualNetworkId')]"
        ],
        "properties": {
          "accessPolicies": [
            {
              "tenantId": "[reference(variables('applicationGatewayUserDefinedManagedIdentityId')).tenantId]",
              "objectId": "[reference(variables('applicationGatewayUserDefinedManagedIdentityId')).principalId]",
              "permissions": {
                "secrets": [
                  "get",
                  "list"
                ],
                "certificates": [
                  "get",
                  "List"
                ]
              }
            },
            {
              "tenantId": "[reference(variables('aadPodIdentityUserDefinedManagedIdentityId')).tenantId]",
              "objectId": "[reference(variables('aadPodIdentityUserDefinedManagedIdentityId')).principalId]",
              "permissions": {
                "secrets": [
                  "get",
                  "list"
                ],
                "certificates": [
                  "get",
                  "List"
                ]
              }
            },
            {
              "tenantId": "[reference(variables('virtualMachineUserDefinedManagedIdentityId')).tenantId]",
              "objectId": "[reference(variables('virtualMachineUserDefinedManagedIdentityId')).principalId]",
              "permissions": {
                "secrets": [
                  "Set",
                  "get",
                  "list"
                ],
                "certificates": [
                  "get",
                  "List",
                  "Create",
                  "Import",
                  "Delete"
                ]
              }
            }
          ],
          "sku": {
            "family": "A",
            "name": "standard"
          },
          "tenantId": "[subscription().tenantId]",
          "networkAcls": {
            "bypass": "AzureServices",
            "defaultAction": "Deny",
            "ipRules": [],
            "virtualNetworkRules": [
              {
                "id": "[concat(variables('virtualNetworkId'), '/subnets/', variables('virtualMachineSubnetName'))]",
                "ignoreMissingVnetServiceEndpoint": false
              },
              {
                "id": "[concat(variables('virtualNetworkId'), '/subnets/', variables('applicationGatewaySubnetName'))]",
                "ignoreMissingVnetServiceEndpoint": false
              }
            ]
          },
          "enabledForDeployment": false,
          "enabledForDiskEncryption": false,
          "enabledForTemplateDeployment": false,
          "enableSoftDelete": true
        },
        "resources": [
          {
            "comments": "Grant the AKS cluster ingress controller pod managed identity with reader role permissions over Key Vault; paired with the Access Policy, this allows our ingress controller to pull certificates.",
            "type": "providers/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[concat('Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('readerRoleId')))]",
            "dependsOn": [
              "[variables('keyVaultId')]",
              "[variables('aadPodIdentityUserDefinedManagedIdentityId')]"
            ],
            "properties": {
              "roleDefinitionId": "[variables('readerRoleId')]",
              "principalId": "[reference(variables('aadPodIdentityUserDefinedManagedIdentityId')).principalId]",
              "principalType": "ServicePrincipal"
            }
          }
        ]
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "apiVersion": "2019-09-01",
        "name": "[concat(variables('keyVaultName'), '/appGatewaySslCert')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('keyVaultId')]"
        ],
        "properties": {
          "value": "[parameters('sslCertificateSecretData')]",
          "recoveryLevel": "Purgeable",
          "attributes": {
            "enabled": true,
            "nbf": 1585206000,
            "exp": 1679814000
          }
        }
      },
      {
        "type": "Microsoft.Network/applicationGateways",
        "apiVersion": "2020-11-01",
        "name": "[variables('applicationGatewayName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('keyVaultId')]",
          "[variables('applicationGatewayPublicIPAddressId')]",
          "[variables('virtualNetworkId')]"
        ],
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[variables('applicationGatewayUserDefinedManagedIdentityId')]": {}
          }
        },
        "zones": "[parameters('applicationGatewayZones')]",
        "properties": {
          "sku": {
            "name": "Standard_v2",
            "tier": "Standard_v2"
          },
          "sslCertificates": [
            {
              "name": "[variables('applicationGatewaySSLCert')]",
              "properties": {
                "keyVaultSecretId": "[concat(reference(variables('keyVaultName')).vaultUri,'secrets/appGatewaySslCert')]"
              }
            }
          ],
          "gatewayIPConfigurations": [
            {
              "name": "[variables('applicationGatewayIPConfigurationName')]",
              "properties": {
                "subnet": {
                  "id": "[variables('applicationGatewaySubnetId')]"
                }
              }
            }
          ],
          "frontendIPConfigurations": [
            {
              "name": "[variables('applicationGatewayFrontendIPConfigurationName')]",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "PublicIPAddress": {
                  "id": "[variables('applicationGatewayPublicIPAddressId')]"
                }
              }
            }
          ],
          "frontendPorts": [
            {
              "name": "[variables('applicationGatewayHttpFrontendPortName')]",
              "properties": {
                "Port": 80
              }
            },
            {
              "name": "[variables('applicationGatewayHttpsFrontendPortName')]",
              "properties": {
                "Port": 443
              }
            }
          ],
          "autoscaleConfiguration": {
            "minCapacity": 2,
            "maxCapacity": 10
          },
          "enableHttp2": false,
          "probes": [
            {
              "name": "defaultHttpProbe",
              "properties": {
                "protocol": "Http",
                "path": "/",
                "interval": 30,
                "timeout": 30,
                "unhealthyThreshold": 3,
                "pickHostNameFromBackendHttpSettings": true,
                "minServers": 0
              }
            },
            {
              "name": "defaultHttpsProbe",
              "properties": {
                "protocol": "Https",
                "path": "/",
                "interval": 30,
                "timeout": 30,
                "unhealthyThreshold": 3,
                "pickHostNameFromBackendHttpSettings": true,
                "minServers": 0
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('applicationGatewayBackendAddressPoolName')]",
              "properties": {
                "backendAddresses": []
              }
            }
          ],
          "backendHttpSettingsCollection": [
            {
              "name": "[variables('applicationGatewayBackendHttpSettingsName')]",
              "properties": {
                "Port": 80,
                "Protocol": "Http",
                "CookieBasedAffinity": "Disabled"
              }
            }
          ],
          "httpListeners": [
            {
              "name": "[variables('applicationGatewayHttpListenerName')]",
              "properties": {
                "FrontendIPConfiguration": {
                  "id": "[variables('applicationGatewayFrontendIPConfigurationId')]"
                },
                "FrontendPort": {
                  "id": "[variables('applicationGatewayHttpFrontendPortId')]"
                },
                "Protocol": "Http"
              }
            },
            {
              "name": "[variables('applicationGatewayHttpsListenerName')]",
              "properties": {
                "FrontendIPConfiguration": {
                  "id": "[variables('applicationGatewayFrontendIPConfigurationId')]"
                },
                "FrontendPort": {
                  "id": "[variables('applicationGatewayHttpsFrontendPortId')]"
                },
                "Protocol": "Https",
                "sslCertificate": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/sslCertificates/', variables('applicationGatewaySSLCert'))]"
                }
              }
            }
          ],
          "requestRoutingRules": [
            {
              "Name": "[variables('applicationGatewayHttpRequestRoutingRuleName')]",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[variables('applicationGatewayHttpListenerId')]"
                },
                "backendAddressPool": {
                  "id": "[variables('applicationGatewayBackendAddressPoolId')]"
                },
                "backendHttpSettings": {
                  "id": "[variables('applicationGatewayBackendHttpSettingsId')]"
                }
              }
            },
            {
              "Name": "[variables('applicationGatewayHttpsRequestRoutingRuleName')]",
              "properties": {
                "RuleType": "Basic",
                "httpListener": {
                  "id": "[variables('applicationGatewayHttpsListenerId')]"
                },
                "backendAddressPool": {
                  "id": "[variables('applicationGatewayBackendAddressPoolId')]"
                },
                "backendHttpSettings": {
                  "id": "[variables('applicationGatewayBackendHttpSettingsId')]"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.ContainerService/managedClusters",
        "apiVersion": "2021-05-01",
        "name": "[variables('aksClusterName')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Basic",
          "tier": "[parameters('aksClusterSkuTier')]"
        },
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[variables('aksClusterUserDefinedManagedIdentityId')]": {}
          }
        },
        "tags": "[parameters('aksClusterTags')]",
        "dependsOn": [
          "[variables('virtualNetworkId')]",
          "[variables('applicationGatewayId')]",
          "[variables('aksContributorRoleAssignmentId')]"
        ],
        "properties": {
          "kubernetesVersion": "[parameters('aksClusterKubernetesVersion')]",
          "dnsPrefix": "[variables('aksClusterDnsPrefix')]",
          "agentPoolProfiles": [
            {
              "name": "[tolower('systempool')]",
              "count": "[parameters('systemNodePoolAgentCount')]",
              "vmSize": "[parameters('systemNodePoolVirtualMachineSize')]",
              "osDiskSizeGB": 128,
              "osDiskType": "Managed",
              "kubeletDiskType": "OS",
              "maxPods": 110,
              "type": "VirtualMachineScaleSets",
              "maxCount": "[parameters('systemNodePoolMaxCount')]",
              "minCount": "[parameters('systemNodePoolMinCount')]",
              "enableAutoScaling": true,
              "orchestratorVersion": "[parameters('aksClusterKubernetesVersion')]",
              "enableNodePublicIP": false,
              "nodeLabels": {},
              "mode": "System",
              "enableEncryptionAtHost": false,
              "enableUltraSSD": false,
              "osType": "Linux",
              "osSKU": "Ubuntu",
              "enableFIPS": false,
              "vnetSubnetID": "[variables('aksSubnetId')]",
              "scaleSetPriority": "Regular",
              "scaleSetEvictionPolicy": "Delete",
              "upgradeSettings": {},
              "availabilityZones": "[parameters('aksNodePoolAvailabilityZones')]"
            },
            {
              "name": "[tolower('userpool')]",
              "count": "[parameters('userNodePoolAgentCount')]",
              "vmSize": "[parameters('userNodePoolVirtualMachineSize')]",
              "osDiskSizeGB": 128,
              "osDiskType": "Managed",
              "kubeletDiskType": "OS",
              "maxPods": 110,
              "type": "VirtualMachineScaleSets",
              "maxCount": "[parameters('userNodePoolMaxCount')]",
              "minCount": "[parameters('userNodePoolMinCount')]",
              "enableAutoScaling": true,
              "orchestratorVersion": "[parameters('aksClusterKubernetesVersion')]",
              "enableNodePublicIP": false,
              "nodeLabels": {},
              "mode": "User",
              "enableEncryptionAtHost": false,
              "enableUltraSSD": false,
              "osType": "Linux",
              "osSKU": "Ubuntu",
              "enableFIPS": false,
              "vnetSubnetID": "[variables('aksSubnetId')]",
              "scaleSetPriority": "Regular",
              "scaleSetEvictionPolicy": "Delete",
              "upgradeSettings": {},
              "availabilityZones": "[parameters('aksNodePoolAvailabilityZones')]"
            }
          ],
          "servicePrincipalProfile": {
            "clientId": "msi"
          },
          "addonProfiles": {
            "azurepolicy": {
              "enabled": true,
              "config": {
                "version": "v2"
              }
            },
            "ingressApplicationGateway": {
              "config": {
                "applicationGatewayId": "[variables('applicationGatewayId')]"
              },
              "enabled": true,
              "identity": {
                "clientId": "[reference(variables('applicationGatewayUserDefinedManagedIdentityId')).clientId]",
                "objectId": "[reference(variables('applicationGatewayUserDefinedManagedIdentityId')).principalId]",
                "resourceId": "[variables('applicationGatewayUserDefinedManagedIdentityId')]"
              }
            }
          },
          "enableRBAC": true,
          "networkProfile": {
            "networkPlugin": "azure",
            "networkPolicy": "azure",
            "loadBalancerSku": "Standard",
            "outboundType": "userAssignedNATGateway",
 
            "podCidr": "[parameters('aksClusterPodCidr')]",
            "serviceCidr": "[parameters('aksClusterServiceCidr')]",
            "dnsServiceIP": "[parameters('aksClusterDnsServiceIP')]",
            "dockerBridgeCidr": "[parameters('aksClusterDockerBridgeCidr')]"
          },
          "identityProfile": {
            "kubeletidentity": {
              "clientId": "[reference(variables('applicationGatewayUserDefinedManagedIdentityId')).clientId]",
              "objectId": "[reference(variables('aksClusterUserDefinedManagedIdentityId')).principalId]",
              "resourceId": "[variables('aksClusterUserDefinedManagedIdentityId')]"
            }
          },
          "aadProfile": "[if(parameters('aadEnabled'), variables('aadProfileConfiguration'), json('null'))]",
          "autoScalerProfile": {
            "balance-similar-node-groups": "false",
            "expander": "random",
            "max-empty-bulk-delete": "10",
            "max-graceful-termination-sec": "600",
            "max-node-provision-time": "15m",
            "max-total-unready-percentage": "45",
            "new-pod-scale-up-delay": "0s",
            "ok-total-unready-count": "3",
            "scale-down-delay-after-add": "10m",
            "scale-down-delay-after-delete": "10s",
            "scale-down-delay-after-failure": "3m",
            "scale-down-unneeded-time": "10m",
            "scale-down-unready-time": "20m",
            "scale-down-utilization-threshold": "0.5",
            "scan-interval": "1s",
            "skip-nodes-with-local-storage": "false",
            "skip-nodes-with-system-pods": "true"
          },
          "disableLocalAccounts": false,
          "apiServerAccessProfile": {
            "enablePrivateCluster": "[parameters('aksClusterEnablePrivateCluster')]"
          }
        }
      },
      {
        "name": "[concat(variables('aksClusterName'), '/systempool')]",
        "type": "Microsoft.ContainerService/managedClusters/agentPools",
        "apiVersion": "2021-05-01",
        "dependsOn": [
          "[variables('aksClusterId')]"
        ],
        "properties": {
          "count": "[parameters('systemNodePoolAgentCount')]",
          "vmSize": "[parameters('systemNodePoolVirtualMachineSize')]",
          "osDiskSizeGB": 128,
          "osDiskType": "Managed",
          "kubeletDiskType": "OS",
          "maxPods": 110,
          "type": "VirtualMachineScaleSets",
          "maxCount": "[parameters('systemNodePoolMaxCount')]",
          "minCount": "[parameters('systemNodePoolMinCount')]",
          "enableAutoScaling": true,
          "orchestratorVersion": "[parameters('aksClusterKubernetesVersion')]",
          "enableNodePublicIP": false,
          "nodeLabels": {},
          "mode": "System",
          "enableEncryptionAtHost": false,
          "enableUltraSSD": false,
          "osType": "Linux",
          "osSKU": "Ubuntu",
          "enableFIPS": false,
          "vnetSubnetID": "[variables('aksSubnetId')]",
          "scaleSetPriority": "Regular",
          "scaleSetEvictionPolicy": "Delete",
          "upgradeSettings": {},
          "availabilityZones": "[parameters('aksNodePoolAvailabilityZones')]"
        }
      },
      {
        "name": "[concat(variables('aksClusterName'), '/userpool')]",
        "type": "Microsoft.ContainerService/managedClusters/agentPools",
        "apiVersion": "2021-05-01",
        "dependsOn": [
          "[variables('aksClusterId')]"
        ],
        "properties": {
          "count": "[parameters('userNodePoolAgentCount')]",
          "vmSize": "[parameters('userNodePoolVirtualMachineSize')]",
          "osDiskSizeGB": 128,
          "osDiskType": "Managed",
          "kubeletDiskType": "OS",
          "maxPods": 110,
          "type": "VirtualMachineScaleSets",
          "maxCount": "[parameters('userNodePoolMaxCount')]",
          "minCount": "[parameters('userNodePoolMinCount')]",
          "enableAutoScaling": true,
          "orchestratorVersion": "[parameters('aksClusterKubernetesVersion')]",
          "enableNodePublicIP": false,
          "nodeLabels": {},
          "mode": "User",
          "enableEncryptionAtHost": false,
          "enableUltraSSD": false,
          "osType": "Linux",
          "osSKU": "Ubuntu",
          "enableFIPS": false,
          "vnetSubnetID": "[variables('aksSubnetId')]",
          "scaleSetPriority": "Regular",
          "scaleSetEvictionPolicy": "Delete",
          "upgradeSettings": {},
          "availabilityZones": "[parameters('aksNodePoolAvailabilityZones')]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('virtualMachineNicName')]",
        "apiVersion": "2020-07-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('virtualNetworkId')]",
          "[variables('virtualMachinePublicIpAddressId')]"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('virtualMachineSubnetId')]"
                },
                "publicIpAddress": {
                  "id": "[variables('virtualMachinePublicIpAddressId')]"
                }
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[variables('virtualMachineName')]",
        "apiVersion": "2020-12-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('virtualMachineNicId')]",
          "[variables('aksClusterId')]",
          "[variables('virtualMachineContributorRoleAssignmentId')]"
        ],
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[variables('virtualMachineUserDefinedManagedIdentityId')]": {}
          }
        },
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('virtualMachineSize')]"
          },
          "osProfile": {
            "computerName": "[variables('virtualMachineName')]",
            "adminUsername": "[parameters('virtualMachineAdminUsername')]",
            "adminPassword": "[parameters('virtualMachineAdminPassword')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": false,
              "provisionVMAgent": true
            }
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "OpenLogic",
              "offer": "CentOS",
              "sku": "8_2",
              "version": "latest"
            },
            "osDisk": {
              "name": "[concat(variables('virtualMachineName'),'_OSDisk')]",
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": 30,
              "managedDisk": {
                "storageAccountType": "StandardSSD_LRS"
              }
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[variables('virtualMachineNicId')]"
              }
            ]
          }
        }
      },
      {
        "name": "[concat(variables('virtualMachineName'),'/molecule-deployments')]",
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "apiVersion": "2020-12-01",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[variables('netAppVolumeId')]",
          "[variables('virtualMachineId')]",
          "[variables('virtualMachineContributorRoleAssignmentId')]"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "https://raw.githubusercontent.com/OfficialBoomi/azure-kubernetes-molecule-quickstart/main/scripts/k8s_deployment.sh"
            ],
            "commandToExecute": "[concat('./k8s_deployment.sh',' --resource_group \"',resourceGroup().name, '\" --appgw_ssl_cert \"', variables('applicationGatewaySSLCert'),'\" --aks_name \"', variables('aksClusterName'), '\" --boomi_auth \"', parameters('BoomiAuthenticationType'), '\" --boomi_token \"', parameters('BoomiMFAInstallToken'), '\" --boomi_username \"',parameters('BoomiUsername'), '\" --boomi_password \"', parameters('BoomiPassword'), '\" --boomi_account \"', parameters('BoomiAccountID'),'\" --boomi_molecule_name \"', parameters('BoomiMoleculeName'), '\" --fileshare \"', variables('netAppVolumeName'),'\" --pod_cpu \"', parameters('PodCPUSize'),'\" --pod_memory \"',parameters('PodMemorySize'),'\" --pv_size \"',parameters('PersistentVolumeSize'),'\" --netAppIP \"', reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes/',variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))).mountTargets[0].ipAddress,'\"')]"
          }
        }
      }
    ],
    "outputs": {
      "virtualMachinePublicIpAddress": {
        "type": "string",
        "value": "[reference(variables('virtualMachinePublicIpAddressName')).ipAddress]"
      },
      "applicationGatewayPublicIpAddress": {
        "type": "string",
        "value": "[reference(variables('applicationGatewayPublicIPAddressName')).ipAddress]"
      },
      "netAppFileVolumeIPAddress": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes/', variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))).mountTargets[0].ipAddress]"
      },
      "aksClusterName": {
        "type": "string",
        "value": "[variables('aksClusterName')]"
      }
    }
  }
